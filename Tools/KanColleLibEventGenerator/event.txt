
/// <summary>
/// api_get_member/basic を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberBasicEventHandler GetGetmemberBasic;
public delegate void GetGetmemberBasicEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.Basic> response);
protected virtual void OnGetGetmemberBasic(RequestBase request, Svdata<TransmissionData.api_get_member.Basic> response) { GetGetmemberBasic?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/deck を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberDeckEventHandler GetGetmemberDeck;
public delegate void GetGetmemberDeckEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.Deck> response);
protected virtual void OnGetGetmemberDeck(RequestBase request, Svdata<TransmissionData.api_get_member.Deck> response) { GetGetmemberDeck?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/furniture を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberFurnitureEventHandler GetGetmemberFurniture;
public delegate void GetGetmemberFurnitureEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.Furniture> response);
protected virtual void OnGetGetmemberFurniture(RequestBase request, Svdata<TransmissionData.api_get_member.Furniture> response) { GetGetmemberFurniture?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/kdock を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberKdockEventHandler GetGetmemberKdock;
public delegate void GetGetmemberKdockEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.KDock> response);
protected virtual void OnGetGetmemberKdock(RequestBase request, Svdata<TransmissionData.api_get_member.KDock> response) { GetGetmemberKdock?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/mapcell を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberMapcellEventHandler GetGetmemberMapcell;
public delegate void GetGetmemberMapcellEventHandler(object sender, TransmissionRequest.api_get_member.MapcellRequest request, Svdata<TransmissionData.api_get_member.Mapcell> response);
protected virtual void OnGetGetmemberMapcell(TransmissionRequest.api_get_member.MapcellRequest request, Svdata<TransmissionData.api_get_member.Mapcell> response) { GetGetmemberMapcell?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/mapinfo を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberMapinfoEventHandler GetGetmemberMapinfo;
public delegate void GetGetmemberMapinfoEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.Mapinfo> response);
protected virtual void OnGetGetmemberMapinfo(RequestBase request, Svdata<TransmissionData.api_get_member.Mapinfo> response) { GetGetmemberMapinfo?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/material を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberMaterialEventHandler GetGetmemberMaterial;
public delegate void GetGetmemberMaterialEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.Material> response);
protected virtual void OnGetGetmemberMaterial(RequestBase request, Svdata<TransmissionData.api_get_member.Material> response) { GetGetmemberMaterial?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/mission を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberMissionEventHandler GetGetmemberMission;
public delegate void GetGetmemberMissionEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.Mission> response);
protected virtual void OnGetGetmemberMission(RequestBase request, Svdata<TransmissionData.api_get_member.Mission> response) { GetGetmemberMission?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/ndock を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberNdockEventHandler GetGetmemberNdock;
public delegate void GetGetmemberNdockEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.NDock> response);
protected virtual void OnGetGetmemberNdock(RequestBase request, Svdata<TransmissionData.api_get_member.NDock> response) { GetGetmemberNdock?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/preset_deck を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberPresetdeckEventHandler GetGetmemberPresetdeck;
public delegate void GetGetmemberPresetdeckEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.PresetDeck> response);
protected virtual void OnGetGetmemberPresetdeck(RequestBase request, Svdata<TransmissionData.api_get_member.PresetDeck> response) { GetGetmemberPresetdeck?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/questlist を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberQuestlistEventHandler GetGetmemberQuestlist;
public delegate void GetGetmemberQuestlistEventHandler(object sender, TransmissionRequest.api_get_member.QuestlistRequest request, Svdata<TransmissionData.api_get_member.Questlist> response);
protected virtual void OnGetGetmemberQuestlist(TransmissionRequest.api_get_member.QuestlistRequest request, Svdata<TransmissionData.api_get_member.Questlist> response) { GetGetmemberQuestlist?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/ship2 を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberShip2EventHandler GetGetmemberShip2;
public delegate void GetGetmemberShip2EventHandler(object sender, TransmissionRequest.api_get_member.Ship2Request request, Svdata<TransmissionData.api_get_member.Ship2> response);
protected virtual void OnGetGetmemberShip2(TransmissionRequest.api_get_member.Ship2Request request, Svdata<TransmissionData.api_get_member.Ship2> response) { GetGetmemberShip2?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/ship3 を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberShip3EventHandler GetGetmemberShip3;
public delegate void GetGetmemberShip3EventHandler(object sender, TransmissionRequest.api_get_member.Ship3Request request, Svdata<TransmissionData.api_get_member.Ship3> response);
protected virtual void OnGetGetmemberShip3(TransmissionRequest.api_get_member.Ship3Request request, Svdata<TransmissionData.api_get_member.Ship3> response) { GetGetmemberShip3?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/ship_deck を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberShipDeckEventHandler GetGetmemberShipDeck;
public delegate void GetGetmemberShipDeckEventHandler(object sender, TransmissionRequest.api_get_member.ShipDeckRequest request, Svdata<TransmissionData.api_get_member.ShipDeck> response);
protected virtual void OnGetGetmemberShipDeck(TransmissionRequest.api_get_member.ShipDeckRequest request, Svdata<TransmissionData.api_get_member.ShipDeck> response) { GetGetmemberShipDeck?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/slot_item を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberSlotItemEventHandler GetGetmemberSlotItem;
public delegate void GetGetmemberSlotItemEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.SlotItem> response);
protected virtual void OnGetGetmemberSlotItem(RequestBase request, Svdata<TransmissionData.api_get_member.SlotItem> response) { GetGetmemberSlotItem?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/sortie_conditions を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberSortieConditionsEventHandler GetGetmemberSortieConditions;
public delegate void GetGetmemberSortieConditionsEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.SortieConditions> response);
protected virtual void OnGetGetmemberSortieConditions(RequestBase request, Svdata<TransmissionData.api_get_member.SortieConditions> response) { GetGetmemberSortieConditions?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/unsetslot を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberUnsetslotEventHandler GetGetmemberUnsetslot;
public delegate void GetGetmemberUnsetslotEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.Unsetslot> response);
protected virtual void OnGetGetmemberUnsetslot(RequestBase request, Svdata<TransmissionData.api_get_member.Unsetslot> response) { GetGetmemberUnsetslot?.Invoke(this, request, response); }

/// <summary>
/// api_get_member/useitem を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetGetmemberUseitemEventHandler GetGetmemberUseitem;
public delegate void GetGetmemberUseitemEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_get_member.Useitem> response);
protected virtual void OnGetGetmemberUseitem(RequestBase request, Svdata<TransmissionData.api_get_member.Useitem> response) { GetGetmemberUseitem?.Invoke(this, request, response); }

/// <summary>
/// api_port/port を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetPortPortEventHandler GetPortPort;
public delegate void GetPortPortEventHandler(object sender, TransmissionRequest.api_port.PortRequest request, Svdata<TransmissionData.api_port.Port> response);
protected virtual void OnGetPortPort(TransmissionRequest.api_port.PortRequest request, Svdata<TransmissionData.api_port.Port> response) { GetPortPort?.Invoke(this, request, response); }

/// <summary>
/// api_req_battle_midnight/battle を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqbattlemidnightBattleEventHandler GetReqbattlemidnightBattle;
public delegate void GetReqbattlemidnightBattleEventHandler(object sender, TransmissionRequest.api_req_battle_midnight.BattleRequest request, Svdata<TransmissionData.api_req_battle_midnight.Battle> response);
protected virtual void OnGetReqbattlemidnightBattle(TransmissionRequest.api_req_battle_midnight.BattleRequest request, Svdata<TransmissionData.api_req_battle_midnight.Battle> response) { GetReqbattlemidnightBattle?.Invoke(this, request, response); }

/// <summary>
/// api_req_battle_midnight/sp_midnight を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqbattlemidnightSpMidnightEventHandler GetReqbattlemidnightSpMidnight;
public delegate void GetReqbattlemidnightSpMidnightEventHandler(object sender, TransmissionRequest.api_req_battle_midnight.SpMidnightRequest request, Svdata<TransmissionData.api_req_battle_midnight.SpMidnight> response);
protected virtual void OnGetReqbattlemidnightSpMidnight(TransmissionRequest.api_req_battle_midnight.SpMidnightRequest request, Svdata<TransmissionData.api_req_battle_midnight.SpMidnight> response) { GetReqbattlemidnightSpMidnight?.Invoke(this, request, response); }

/// <summary>
/// api_req_combined_battle/airbattle を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqcombinedbattleAirbattleEventHandler GetReqcombinedbattleAirbattle;
public delegate void GetReqcombinedbattleAirbattleEventHandler(object sender, TransmissionRequest.api_req_combined_battle.AirbattleRequest request, Svdata<TransmissionData.api_req_combined_battle.Airbattle> response);
protected virtual void OnGetReqcombinedbattleAirbattle(TransmissionRequest.api_req_combined_battle.AirbattleRequest request, Svdata<TransmissionData.api_req_combined_battle.Airbattle> response) { GetReqcombinedbattleAirbattle?.Invoke(this, request, response); }

/// <summary>
/// api_req_combined_battle/battle を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqcombinedbattleBattleEventHandler GetReqcombinedbattleBattle;
public delegate void GetReqcombinedbattleBattleEventHandler(object sender, TransmissionRequest.api_req_combined_battle.BattleRequest request, Svdata<TransmissionData.api_req_combined_battle.Battle> response);
protected virtual void OnGetReqcombinedbattleBattle(TransmissionRequest.api_req_combined_battle.BattleRequest request, Svdata<TransmissionData.api_req_combined_battle.Battle> response) { GetReqcombinedbattleBattle?.Invoke(this, request, response); }

/// <summary>
/// api_req_combined_battle/battleresult を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqcombinedbattleBattleresultEventHandler GetReqcombinedbattleBattleresult;
public delegate void GetReqcombinedbattleBattleresultEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_req_combined_battle.Battleresult> response);
protected virtual void OnGetReqcombinedbattleBattleresult(RequestBase request, Svdata<TransmissionData.api_req_combined_battle.Battleresult> response) { GetReqcombinedbattleBattleresult?.Invoke(this, request, response); }

/// <summary>
/// api_req_combined_battle/battle_water を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqcombinedbattleBattlewaterEventHandler GetReqcombinedbattleBattlewater;
public delegate void GetReqcombinedbattleBattlewaterEventHandler(object sender, TransmissionRequest.api_req_combined_battle.BattleWaterRequest request, Svdata<TransmissionData.api_req_combined_battle.BattleWater> response);
protected virtual void OnGetReqcombinedbattleBattlewater(TransmissionRequest.api_req_combined_battle.BattleWaterRequest request, Svdata<TransmissionData.api_req_combined_battle.BattleWater> response) { GetReqcombinedbattleBattlewater?.Invoke(this, request, response); }

/// <summary>
/// api_req_combined_battle/goback_port を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqcombinedbattleGobackPortEventHandler GetReqcombinedbattleGobackPort;
public delegate void GetReqcombinedbattleGobackPortEventHandler(object sender, RequestBase request, Svdata<object> response);
protected virtual void OnGetReqcombinedbattleGobackPort(RequestBase request, Svdata<object> response) { GetReqcombinedbattleGobackPort?.Invoke(this, request, response); }

/// <summary>
/// api_req_combined_battle/midnight_battle を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqcombinedbattleMidnightbattleEventHandler GetReqcombinedbattleMidnightbattle;
public delegate void GetReqcombinedbattleMidnightbattleEventHandler(object sender, TransmissionRequest.api_req_combined_battle.MidnightBattleRequest request, Svdata<TransmissionData.api_req_combined_battle.MidnightBattle> response);
protected virtual void OnGetReqcombinedbattleMidnightbattle(TransmissionRequest.api_req_combined_battle.MidnightBattleRequest request, Svdata<TransmissionData.api_req_combined_battle.MidnightBattle> response) { GetReqcombinedbattleMidnightbattle?.Invoke(this, request, response); }

/// <summary>
/// api_req_combined_battle/sp_midnight を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqcombinedbattleSpMidnightEventHandler GetReqcombinedbattleSpMidnight;
public delegate void GetReqcombinedbattleSpMidnightEventHandler(object sender, TransmissionRequest.api_req_combined_battle.SpMidnightRequest request, Svdata<TransmissionData.api_req_combined_battle.SpMidnight> response);
protected virtual void OnGetReqcombinedbattleSpMidnight(TransmissionRequest.api_req_combined_battle.SpMidnightRequest request, Svdata<TransmissionData.api_req_combined_battle.SpMidnight> response) { GetReqcombinedbattleSpMidnight?.Invoke(this, request, response); }

/// <summary>
/// api_req_hensei/change を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqhenseiChangeEventHandler GetReqhenseiChange;
public delegate void GetReqhenseiChangeEventHandler(object sender, TransmissionRequest.api_req_hensei.ChangeRequest request, Svdata<object> response);
protected virtual void OnGetReqhenseiChange(TransmissionRequest.api_req_hensei.ChangeRequest request, Svdata<object> response) { GetReqhenseiChange?.Invoke(this, request, response); }

/// <summary>
/// api_req_hensei/combined を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqhenseiCombinedEventHandler GetReqhenseiCombined;
public delegate void GetReqhenseiCombinedEventHandler(object sender, TransmissionRequest.api_req_hensei.CombinedRequest request, Svdata<TransmissionData.api_req_hensei.Combined> response);
protected virtual void OnGetReqhenseiCombined(TransmissionRequest.api_req_hensei.CombinedRequest request, Svdata<TransmissionData.api_req_hensei.Combined> response) { GetReqhenseiCombined?.Invoke(this, request, response); }

/// <summary>
/// api_req_hensei/lock を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqhenseiLockEventHandler GetReqhenseiLock;
public delegate void GetReqhenseiLockEventHandler(object sender, TransmissionRequest.api_req_hensei.LockRequest request, Svdata<TransmissionData.api_req_hensei.Lock> response);
protected virtual void OnGetReqhenseiLock(TransmissionRequest.api_req_hensei.LockRequest request, Svdata<TransmissionData.api_req_hensei.Lock> response) { GetReqhenseiLock?.Invoke(this, request, response); }

/// <summary>
/// api_req_hensei/preset_register を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqhenseiPresetregisterEventHandler GetReqhenseiPresetregister;
public delegate void GetReqhenseiPresetregisterEventHandler(object sender, TransmissionRequest.api_req_hensei.PresetRegisterRequest request, Svdata<TransmissionData.api_req_hensei.PresetRegister> response);
protected virtual void OnGetReqhenseiPresetregister(TransmissionRequest.api_req_hensei.PresetRegisterRequest request, Svdata<TransmissionData.api_req_hensei.PresetRegister> response) { GetReqhenseiPresetregister?.Invoke(this, request, response); }

/// <summary>
/// api_req_hensei/preset_select を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqhenseiPresetselectEventHandler GetReqhenseiPresetselect;
public delegate void GetReqhenseiPresetselectEventHandler(object sender, TransmissionRequest.api_req_hensei.PresetSelectRequest request, Svdata<TransmissionData.api_req_hensei.PresetSelect> response);
protected virtual void OnGetReqhenseiPresetselect(TransmissionRequest.api_req_hensei.PresetSelectRequest request, Svdata<TransmissionData.api_req_hensei.PresetSelect> response) { GetReqhenseiPresetselect?.Invoke(this, request, response); }

/// <summary>
/// api_req_hensei/preset_delete を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqhenseiPresetdeleteEventHandler GetReqhenseiPresetdelete;
public delegate void GetReqhenseiPresetdeleteEventHandler(object sender, TransmissionRequest.api_req_hensei.PresetDeleteRequest request, Svdata<object> response);
protected virtual void OnGetReqhenseiPresetdelete(TransmissionRequest.api_req_hensei.PresetDeleteRequest request, Svdata<object> response) { GetReqhenseiPresetdelete?.Invoke(this, request, response); }

/// <summary>
/// api_req_hokyu/charge を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqhokyuChargeEventHandler GetReqhokyuCharge;
public delegate void GetReqhokyuChargeEventHandler(object sender, TransmissionRequest.api_req_hokyu.ChargeRequest request, Svdata<TransmissionData.api_req_hokyu.Charge> response);
protected virtual void OnGetReqhokyuCharge(TransmissionRequest.api_req_hokyu.ChargeRequest request, Svdata<TransmissionData.api_req_hokyu.Charge> response) { GetReqhokyuCharge?.Invoke(this, request, response); }

/// <summary>
/// api_req_kaisou/remodeling を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqkaisouRemodelingEventHandler GetReqkaisouRemodeling;
public delegate void GetReqkaisouRemodelingEventHandler(object sender, TransmissionRequest.api_req_kaisou.RemodelingRequest request, Svdata<object> response);
protected virtual void OnGetReqkaisouRemodeling(TransmissionRequest.api_req_kaisou.RemodelingRequest request, Svdata<object> response) { GetReqkaisouRemodeling?.Invoke(this, request, response); }

/// <summary>
/// api_req_kousyou/createitem を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqkousyouCreateitemEventHandler GetReqkousyouCreateitem;
public delegate void GetReqkousyouCreateitemEventHandler(object sender, TransmissionRequest.api_req_kousyou.CreateitemRequest request, Svdata<TransmissionData.api_req_kousyou.Createitem> response);
protected virtual void OnGetReqkousyouCreateitem(TransmissionRequest.api_req_kousyou.CreateitemRequest request, Svdata<TransmissionData.api_req_kousyou.Createitem> response) { GetReqkousyouCreateitem?.Invoke(this, request, response); }

/// <summary>
/// api_req_kousyou/createship を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqkousyouCreateshipEventHandler GetReqkousyouCreateship;
public delegate void GetReqkousyouCreateshipEventHandler(object sender, TransmissionRequest.api_req_kousyou.CreateshipRequest request, Svdata<object> response);
protected virtual void OnGetReqkousyouCreateship(TransmissionRequest.api_req_kousyou.CreateshipRequest request, Svdata<object> response) { GetReqkousyouCreateship?.Invoke(this, request, response); }

/// <summary>
/// api_req_kousyou/createship_speedchange を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqkousyouCreateshipSpeedchangeEventHandler GetReqkousyouCreateshipSpeedchange;
public delegate void GetReqkousyouCreateshipSpeedchangeEventHandler(object sender, TransmissionRequest.api_req_kousyou.CreateshipSpeedchangeRequest request, Svdata<object> response);
protected virtual void OnGetReqkousyouCreateshipSpeedchange(TransmissionRequest.api_req_kousyou.CreateshipSpeedchangeRequest request, Svdata<object> response) { GetReqkousyouCreateshipSpeedchange?.Invoke(this, request, response); }

/// <summary>
/// api_req_kousyou/destroyitem2 を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqkousyouDestroyitem2EventHandler GetReqkousyouDestroyitem2;
public delegate void GetReqkousyouDestroyitem2EventHandler(object sender, TransmissionRequest.api_req_kousyou.Destroyitem2Request request, Svdata<TransmissionData.api_req_kousyou.Destroyitem2> response);
protected virtual void OnGetReqkousyouDestroyitem2(TransmissionRequest.api_req_kousyou.Destroyitem2Request request, Svdata<TransmissionData.api_req_kousyou.Destroyitem2> response) { GetReqkousyouDestroyitem2?.Invoke(this, request, response); }

/// <summary>
/// api_req_kousyou/destroyship を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqkousyouDestroyshipEventHandler GetReqkousyouDestroyship;
public delegate void GetReqkousyouDestroyshipEventHandler(object sender, TransmissionRequest.api_req_kousyou.DestroyshipRequest request, Svdata<TransmissionData.api_req_kousyou.Destroyship> response);
protected virtual void OnGetReqkousyouDestroyship(TransmissionRequest.api_req_kousyou.DestroyshipRequest request, Svdata<TransmissionData.api_req_kousyou.Destroyship> response) { GetReqkousyouDestroyship?.Invoke(this, request, response); }

/// <summary>
/// api_req_kousyou/getship を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqkousyouGetshipEventHandler GetReqkousyouGetship;
public delegate void GetReqkousyouGetshipEventHandler(object sender, TransmissionRequest.api_req_kousyou.GetshipRequest request, Svdata<TransmissionData.api_req_kousyou.Getship> response);
protected virtual void OnGetReqkousyouGetship(TransmissionRequest.api_req_kousyou.GetshipRequest request, Svdata<TransmissionData.api_req_kousyou.Getship> response) { GetReqkousyouGetship?.Invoke(this, request, response); }

/// <summary>
/// api_req_map/next を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqmapNextEventHandler GetReqmapNext;
public delegate void GetReqmapNextEventHandler(object sender, TransmissionRequest.api_req_map.NextRequest request, Svdata<TransmissionData.api_req_map.Next> response);
protected virtual void OnGetReqmapNext(TransmissionRequest.api_req_map.NextRequest request, Svdata<TransmissionData.api_req_map.Next> response) { GetReqmapNext?.Invoke(this, request, response); }

/// <summary>
/// api_req_map/start を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqmapStartEventHandler GetReqmapStart;
public delegate void GetReqmapStartEventHandler(object sender, TransmissionRequest.api_req_map.StartRequest request, Svdata<TransmissionData.api_req_map.Start> response);
protected virtual void OnGetReqmapStart(TransmissionRequest.api_req_map.StartRequest request, Svdata<TransmissionData.api_req_map.Start> response) { GetReqmapStart?.Invoke(this, request, response); }

/// <summary>
/// api_req_member/get_incentive を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqmemberGetIncentiveEventHandler GetReqmemberGetIncentive;
public delegate void GetReqmemberGetIncentiveEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_req_member.GetIncentive> response);
protected virtual void OnGetReqmemberGetIncentive(RequestBase request, Svdata<TransmissionData.api_req_member.GetIncentive> response) { GetReqmemberGetIncentive?.Invoke(this, request, response); }

/// <summary>
/// api_req_member/updatecomment を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqmemberUpdatecommentEventHandler GetReqmemberUpdatecomment;
public delegate void GetReqmemberUpdatecommentEventHandler(object sender, TransmissionRequest.api_req_member.UpdatecommentRequest request, Svdata<object> response);
protected virtual void OnGetReqmemberUpdatecomment(TransmissionRequest.api_req_member.UpdatecommentRequest request, Svdata<object> response) { GetReqmemberUpdatecomment?.Invoke(this, request, response); }

/// <summary>
/// api_req_member/updatedeckname を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqmemberUpdatedecknameEventHandler GetReqmemberUpdatedeckname;
public delegate void GetReqmemberUpdatedecknameEventHandler(object sender, TransmissionRequest.api_req_member.UpdatedecknameRequest request, Svdata<object> response);
protected virtual void OnGetReqmemberUpdatedeckname(TransmissionRequest.api_req_member.UpdatedecknameRequest request, Svdata<object> response) { GetReqmemberUpdatedeckname?.Invoke(this, request, response); }

/// <summary>
/// api_req_mission/result を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqmissionResultEventHandler GetReqmissionResult;
public delegate void GetReqmissionResultEventHandler(object sender, TransmissionRequest.api_req_mission.ResultRequest request, Svdata<TransmissionData.api_req_mission.Result> response);
protected virtual void OnGetReqmissionResult(TransmissionRequest.api_req_mission.ResultRequest request, Svdata<TransmissionData.api_req_mission.Result> response) { GetReqmissionResult?.Invoke(this, request, response); }

/// <summary>
/// api_req_mission/return_instruction を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqmissionReturnInstructionEventHandler GetReqmissionReturnInstruction;
public delegate void GetReqmissionReturnInstructionEventHandler(object sender, TransmissionRequest.api_req_mission.ReturnInstructionRequest request, Svdata<TransmissionData.api_req_mission.ReturnInstruction> response);
protected virtual void OnGetReqmissionReturnInstruction(TransmissionRequest.api_req_mission.ReturnInstructionRequest request, Svdata<TransmissionData.api_req_mission.ReturnInstruction> response) { GetReqmissionReturnInstruction?.Invoke(this, request, response); }

/// <summary>
/// api_req_mission/start を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqmissionStartEventHandler GetReqmissionStart;
public delegate void GetReqmissionStartEventHandler(object sender, TransmissionRequest.api_req_mission.StartRequest request, Svdata<TransmissionData.api_req_mission.Start> response);
protected virtual void OnGetReqmissionStart(TransmissionRequest.api_req_mission.StartRequest request, Svdata<TransmissionData.api_req_mission.Start> response) { GetReqmissionStart?.Invoke(this, request, response); }

/// <summary>
/// api_req_nyukyo/speedchange を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqnyukyoSpeedchangeEventHandler GetReqnyukyoSpeedchange;
public delegate void GetReqnyukyoSpeedchangeEventHandler(object sender, TransmissionRequest.api_req_nyukyo.SpeedchangeRequest request, Svdata<object> response);
protected virtual void OnGetReqnyukyoSpeedchange(TransmissionRequest.api_req_nyukyo.SpeedchangeRequest request, Svdata<object> response) { GetReqnyukyoSpeedchange?.Invoke(this, request, response); }

/// <summary>
/// api_req_nyukyo/start を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqnyukyoStartEventHandler GetReqnyukyoStart;
public delegate void GetReqnyukyoStartEventHandler(object sender, TransmissionRequest.api_req_nyukyo.StartRequest request, Svdata<object> response);
protected virtual void OnGetReqnyukyoStart(TransmissionRequest.api_req_nyukyo.StartRequest request, Svdata<object> response) { GetReqnyukyoStart?.Invoke(this, request, response); }

/// <summary>
/// api_req_quest/clearitemget を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqquestClearitemgetEventHandler GetReqquestClearitemget;
public delegate void GetReqquestClearitemgetEventHandler(object sender, TransmissionRequest.api_req_quest.ClearitemgetRequest request, Svdata<TransmissionData.api_req_quest.Clearitemget> response);
protected virtual void OnGetReqquestClearitemget(TransmissionRequest.api_req_quest.ClearitemgetRequest request, Svdata<TransmissionData.api_req_quest.Clearitemget> response) { GetReqquestClearitemget?.Invoke(this, request, response); }

/// <summary>
/// api_req_quest/start を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqquestStartEventHandler GetReqquestStart;
public delegate void GetReqquestStartEventHandler(object sender, TransmissionRequest.api_req_quest.StartRequest request, Svdata<object> response);
protected virtual void OnGetReqquestStart(TransmissionRequest.api_req_quest.StartRequest request, Svdata<object> response) { GetReqquestStart?.Invoke(this, request, response); }

/// <summary>
/// api_req_quest/stop を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqquestStopEventHandler GetReqquestStop;
public delegate void GetReqquestStopEventHandler(object sender, TransmissionRequest.api_req_quest.StopRequest request, Svdata<object> response);
protected virtual void OnGetReqquestStop(TransmissionRequest.api_req_quest.StopRequest request, Svdata<object> response) { GetReqquestStop?.Invoke(this, request, response); }

/// <summary>
/// api_req_sortie/airbattle を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqsortieAirbattleEventHandler GetReqsortieAirbattle;
public delegate void GetReqsortieAirbattleEventHandler(object sender, TransmissionRequest.api_req_sortie.AirbattleRequest request, Svdata<TransmissionData.api_req_sortie.Airbattle> response);
protected virtual void OnGetReqsortieAirbattle(TransmissionRequest.api_req_sortie.AirbattleRequest request, Svdata<TransmissionData.api_req_sortie.Airbattle> response) { GetReqsortieAirbattle?.Invoke(this, request, response); }

/// <summary>
/// api_req_sortie/battle を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqsortieBattleEventHandler GetReqsortieBattle;
public delegate void GetReqsortieBattleEventHandler(object sender, TransmissionRequest.api_req_sortie.BattleRequest request, Svdata<TransmissionData.api_req_sortie.Battle> response);
protected virtual void OnGetReqsortieBattle(TransmissionRequest.api_req_sortie.BattleRequest request, Svdata<TransmissionData.api_req_sortie.Battle> response) { GetReqsortieBattle?.Invoke(this, request, response); }

/// <summary>
/// api_req_sortie/battleresult を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqsortieBattleresultEventHandler GetReqsortieBattleresult;
public delegate void GetReqsortieBattleresultEventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_req_sortie.Battleresult> response);
protected virtual void OnGetReqsortieBattleresult(RequestBase request, Svdata<TransmissionData.api_req_sortie.Battleresult> response) { GetReqsortieBattleresult?.Invoke(this, request, response); }

/// <summary>
/// api_req_sortie/ld_airbattle を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetReqsortieLdAirbattleEventHandler GetReqsortieLdAirbattle;
public delegate void GetReqsortieLdAirbattleEventHandler(object sender, TransmissionRequest.api_req_sortie.LdAirbattleRequest request, Svdata<TransmissionData.api_req_sortie.LdAirbattle> response);
protected virtual void OnGetReqsortieLdAirbattle(TransmissionRequest.api_req_sortie.LdAirbattleRequest request, Svdata<TransmissionData.api_req_sortie.LdAirbattle> response) { GetReqsortieLdAirbattle?.Invoke(this, request, response); }

/// <summary>
/// api_start2 を受信して解析に成功した際に呼び出されます
/// </summary>
public event GetStart2EventHandler GetStart2;
public delegate void GetStart2EventHandler(object sender, RequestBase request, Svdata<TransmissionData.api_start2.Start2> response);
protected virtual void OnGetStart2(RequestBase request, Svdata<TransmissionData.api_start2.Start2> response) { GetStart2?.Invoke(this, request, response); }
